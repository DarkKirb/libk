#include <math.h>
#include "internal.h"

#define SPI 1.7724538509055159
int errSer[] = {1,3,10,42,216,1320,9360,75600,685440,6894720,76204800,918086400};
template <typename T>
T __err(T x) {
    T y=x;
    for(int i=1;i<12;i++) {
        if(i%2)
            y+=__pow(x, i*2+1)/errSer[i];
        else
            y-=__pow(x, i*2+1)/errSer[i];
    }
    return (T)(2/SPI) * y;
}
double errRevSer[] = {1.0, 1.0, 0.16666666666666666, 0.01111111111111111, 0.00039682539682539677, 8.818342151675484e-06, 1.3361124472235581e-07, 1.4682554365094045e-09, 1.2235461970911705e-11, 7.997033967916147e-14, 4.2089652462716563e-16, 1.822062877173877e-18, 6.6016770912097e-21, 2.031285258833754e-23, 5.373770526015222e-26, 1.2353495462103959e-28, 2.4906240851016046e-31, 4.439615124958297e-34, 7.04700813485444e-37, 1.0024193648441593e-39, 1.2851530318514863e-42, 1.4926283761341304e-45, 1.5778312644124e-48, 1.5244746516061835e-51, 1.3514846202182478e-54, 1.1032527511985696e-57, 8.320156494710178e-61, 5.814225363179719e-64, 3.775471015051766e-67, 2.2840115033585998e-70, 1.2904019792986439e-73, 6.823913163927255e-77, 3.384877561471853e-80, 1.578031497189675e-83, 6.927267327434921e-87, 2.868433675956489e-90, 1.1222353974790645e-93, 4.154888550459328e-97, 1.4578556317401153e-100, 4.854664108358692e-104, 1.5362861102400925e-107, 4.6259744361339734e-111, 1.3270150419202448e-114, 3.630684109220916e-118, 9.484545739866552e-122, 2.368176214698265e-125, 5.657372705920366e-129, 1.2942971187189123e-132, 2.8383708743835798e-136, 5.971746001227814e-140, 1.2064133335813764e-143, 2.3420953864907327e-147, 4.3728442615585e-151, 7.857761476295598e-155, 1.3599448730175837e-158, 2.268465176009314e-162, 3.6493970013019853e-166, 5.66588573405059e-170, 8.494581310420675e-174, 1.2305637129393996e-177, 1.7234785895509798e-181, 2.3350204437758836e-185, 3.061920330154581e-189, 3.8881528001962934e-193, 4.783652559296621e-197, 5.705011996775934e-201, 6.598440893795899e-205, 7.404826499602624e-209, 8.066259803488698e-213, 8.533015765882468e-217, 8.769800376035425e-221, 8.760164195420462e-225, 8.508317983120107e-229, 8.038089733698731e-233, 7.389308451644357e-237, 6.612356556281304e-241, 5.761900101325639e-245, 4.890841270966504e-249, 4.04536085274318e-253, 3.261598688013529e-257, 2.5641499119603215e-261, 1.9662218479873642e-265, 1.4710622833962024e-269, 1.0741601193108452e-273, 7.657257765261229e-278, 5.3304961818734624e-282, 3.6247084060067063e-286, 2.4082841047151063e-290, 1.5638208472176015e-294, 9.927130370199971e-299, 6.162092098199858e-303, 3.741176673061658e-307, 2.222129171455e-311, 1.29156011e-315, 7.3477e-320, 5e-324};
template <typename T>
T __errc(T x) {
    T y = 0;
    for(int i=0;i<96;i++) {
        y+=(errRevSer[i]/(2*i+1))*__pow((T)(SPI/2)*x,2*i+1);
    }
    return y;
}

template <typename T>
T __lgamma(T x, int precision) {
    return (T)(0.5 * __log(E, 2*PI, precision)) + (x - (T)0.5)*__log((T)E, x, precision) - x + (x/2) * __log((T)E, x*__sinh(1/x, precision) + 1/(810*x*x*x*x*x*x), precision);
}
template <typename T>
T __gamma(T x, int precision) {
    return __exp((T)E, __lgamma(x, precision), precision);
}

#define deferr(name, type, function) \
    type name ( type x ) { \
        return function (x); \
    }

#define defgamma(name, type, function, prec) \
    type name ( type x ) { \
        return function ( x , prec ); \
    }

deferr(erff, float, __err);
deferr(erf, double, __err);
deferr(erfl, long double, __err);

deferr(erfcf, float, __errc);
deferr(erfc, double, __errc);
deferr(erfcl, long double, __errc);

defgamma(lgammaf, float, __lgamma);
defgamma(lgamma, double, __lgamma);
defgamma(lgammal, long double, __lgamma);

defgamma(tgammaf, float, __gamma);
defgamma(tgamma, double, __gamma);
defgamme(tgammal, long double, __gamma);
